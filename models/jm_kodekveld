{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "929f3f85-76f6-4c0c-a41f-f2d088047029",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.ensemble import StackingRegressor\n",
    "from sklearn.linear_model import RidgeCV\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "4543a2ea-fa12-497e-b9ed-f16b353e0b0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the data from a CSV file\n",
    "df = pd.read_csv(\"../data/all_v2_data.csv\", sep=\",\")\n",
    "df_pred= pd.read_csv(\"../data/september_to_predict.csv\", sep=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c002da91-5b53-44ee-bfea-05ff0e8ddbf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "8e44bb97-f948-4e7d-bd93-7b8227ccfa72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Mnd', 'Ap', 'Hoyre', 'Frp', 'SV', 'SP', 'KrF', 'Venstre', 'MDG',\n",
       "       'Rodt', 'Andre', 'Ap_var', 'Hoyre_var', 'Frp_var', 'SV_var', 'SP_var',\n",
       "       'KrF_var', 'Venstre_var', 'MDG_var', 'Rodt_var', 'Andre_var',\n",
       "       'Ap_skandale', 'Hoyre_skandale', 'Frp_skandale', 'SV_skandale',\n",
       "       'SP_skandale', 'KrF_skandale', 'Venstre_skandale', 'MDG_skandale',\n",
       "       'Rodt_skandale', 'Andre_skandale', 'Ap_skandale_lag3',\n",
       "       'Ap_skandale_lag6', 'Hoyre_skandale_lag3', 'Hoyre_skandale_lag6',\n",
       "       'Frp_skandale_lag3', 'Frp_skandale_lag6', 'SV_skandale_lag3',\n",
       "       'SV_skandale_lag6', 'SP_skandale_lag3', 'SP_skandale_lag6',\n",
       "       'KrF_skandale_lag3', 'KrF_skandale_lag6', 'Venstre_skandale_lag3',\n",
       "       'Venstre_skandale_lag6', 'MDG_skandale_lag3', 'MDG_skandale_lag6',\n",
       "       'Rodt_skandale_lag3', 'Rodt_skandale_lag6', 'Andre_skandale_lag3',\n",
       "       'Andre_skandale_lag6', 'Ap_reg', 'Hoyre_reg', 'Frp_reg', 'SV_reg',\n",
       "       'SP_reg', 'KrF_reg', 'Venstre_reg', 'MDG_reg', 'Rodt_reg', 'Andre_reg',\n",
       "       'Ap_reg_lag3', 'Ap_reg_lag6', 'Hoyre_reg_lag3', 'Hoyre_reg_lag6',\n",
       "       'Frp_reg_lag3', 'Frp_reg_lag6', 'SV_reg_lag3', 'SV_reg_lag6',\n",
       "       'SP_reg_lag3', 'SP_reg_lag6', 'KrF_reg_lag3', 'KrF_reg_lag6',\n",
       "       'Venstre_reg_lag3', 'Venstre_reg_lag6', 'MDG_reg_lag3', 'MDG_reg_lag6',\n",
       "       'Rodt_reg_lag3', 'Rodt_reg_lag6', 'Andre_reg_lag3', 'Andre_reg_lag6',\n",
       "       'ledighet', 'ledig_trend3', 'ledig_trend6', 'styringsrente',\n",
       "       'styringsrente_trend3', 'styringsrente_trend6'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "dfc055ee-9252-4bdd-ba71-5d97ca6dd7d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mnd</th>\n",
       "      <th>Ap</th>\n",
       "      <th>Hoyre</th>\n",
       "      <th>Frp</th>\n",
       "      <th>SV</th>\n",
       "      <th>SP</th>\n",
       "      <th>KrF</th>\n",
       "      <th>Venstre</th>\n",
       "      <th>MDG</th>\n",
       "      <th>Rodt</th>\n",
       "      <th>...</th>\n",
       "      <th>Rodt_reg_lag3</th>\n",
       "      <th>Rodt_reg_lag6</th>\n",
       "      <th>Andre_reg_lag3</th>\n",
       "      <th>Andre_reg_lag6</th>\n",
       "      <th>ledighet</th>\n",
       "      <th>ledig_trend3</th>\n",
       "      <th>ledig_trend6</th>\n",
       "      <th>styringsrente</th>\n",
       "      <th>styringsrente_trend3</th>\n",
       "      <th>styringsrente_trend6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9/30/2025</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.033333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Mnd  Ap  Hoyre  Frp  SV  SP  KrF  Venstre  MDG  Rodt  ...  \\\n",
       "0  9/30/2025 NaN    NaN  NaN NaN NaN  NaN      NaN  NaN   NaN  ...   \n",
       "\n",
       "   Rodt_reg_lag3  Rodt_reg_lag6  Andre_reg_lag3  Andre_reg_lag6  ledighet  \\\n",
       "0              0              0               0               0         4   \n",
       "\n",
       "   ledig_trend3  ledig_trend6  styringsrente  styringsrente_trend3  \\\n",
       "0             0             0              4                     0   \n",
       "\n",
       "   styringsrente_trend6  \n",
       "0             -0.033333  \n",
       "\n",
       "[1 rows x 87 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "8c689ea2-757d-41d7-a435-c2336113cc0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "parties=['Ap', 'Hoyre', 'Frp', 'SV', 'SP', 'KrF', 'Venstre', 'MDG','Rodt', 'Andre']\n",
    "predictions=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "30758351-f334-49a9-90c4-a7f5c62d3b19",
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df[[]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "ee11409a-2c4f-4661-9dc5-b6e2635a103f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ap: 29.416 (R²: 0.96) – Top 3 features: Rodt_var (0.555), KrF_var (0.142), Frp_var (0.057)\n",
      "Hoyre: 17.145 (R²: 0.93) – Top 3 features: Hoyre_var (0.894), KrF_var (0.026), ledighet (0.023)\n",
      "Frp: 18.219 (R²: 0.95) – Top 3 features: Frp_var (0.955), Hoyre_var (0.004), SP_var (0.004)\n",
      "SV: 6.611 (R²: 0.96) – Top 3 features: SV_var (0.943), Rodt_var (0.011), Frp_var (0.009)\n",
      "SP: 8.135 (R²: 0.97) – Top 3 features: SP_var (0.922), KrF_reg_lag3 (0.023), Frp_var (0.008)\n",
      "KrF: 3.441 (R²: 0.87) – Top 3 features: Rodt_var (0.658), KrF_var (0.241), Hoyre_var (0.021)\n",
      "Venstre: 4.451 (R²: 0.80) – Top 3 features: Venstre_var (0.795), SP_var (0.046), Frp_var (0.021)\n",
      "MDG: 3.358 (R²: 0.96) – Top 3 features: MDG_var (0.951), SV_reg_lag6 (0.011), SV_reg (0.007)\n",
      "Rodt: 4.771 (R²: 0.97) – Top 3 features: Rodt_var (0.865), KrF_var (0.027), SP_var (0.025)\n",
      "Andre: 4.332 (R²: 0.97) – Top 3 features: Andre_var (0.925), SP_var (0.012), styringsrente_trend6 (0.007)\n"
     ]
    }
   ],
   "source": [
    "for party in parties:\n",
    "    y=df[[party]]\n",
    "    X=df[[\n",
    "        'Hoyre_var', 'Frp_var', 'SV_var', 'SP_var',\n",
    "       'KrF_var', 'Venstre_var', 'MDG_var', 'Rodt_var', 'Andre_var',\n",
    "       'Ap_skandale', 'Hoyre_skandale', 'Frp_skandale', 'SV_skandale',\n",
    "       'SP_skandale', 'KrF_skandale', 'Venstre_skandale', 'MDG_skandale',\n",
    "       'Rodt_skandale', 'Andre_skandale', 'Ap_skandale_lag3',\n",
    "       'Ap_skandale_lag6', 'Hoyre_skandale_lag3', 'Hoyre_skandale_lag6',\n",
    "       'Frp_skandale_lag3', 'Frp_skandale_lag6', 'SV_skandale_lag3',\n",
    "       'SV_skandale_lag6', 'SP_skandale_lag3', 'SP_skandale_lag6',\n",
    "       'KrF_skandale_lag3', 'KrF_skandale_lag6', 'Venstre_skandale_lag3',\n",
    "       'Venstre_skandale_lag6', 'MDG_skandale_lag3', 'MDG_skandale_lag6',\n",
    "       'Rodt_skandale_lag3', 'Rodt_skandale_lag6', 'Andre_skandale_lag3',\n",
    "       'Andre_skandale_lag6', \n",
    "       'Ap_reg', 'Hoyre_reg', 'Frp_reg', 'SV_reg',\n",
    "       'SP_reg', 'KrF_reg', 'Venstre_reg', 'MDG_reg', 'Rodt_reg', 'Andre_reg',\n",
    "       'Ap_reg_lag3', 'Ap_reg_lag6', 'Hoyre_reg_lag3', 'Hoyre_reg_lag6',\n",
    "       'Frp_reg_lag3', 'Frp_reg_lag6', 'SV_reg_lag3', 'SV_reg_lag6',\n",
    "       'SP_reg_lag3', 'SP_reg_lag6', 'KrF_reg_lag3', 'KrF_reg_lag6',\n",
    "       'Venstre_reg_lag3', 'Venstre_reg_lag6', 'MDG_reg_lag3', 'MDG_reg_lag6',\n",
    "       'Rodt_reg_lag3', 'Rodt_reg_lag6', 'Andre_reg_lag3', 'Andre_reg_lag6',\n",
    "       'ledighet', 'ledig_trend3', 'ledig_trend6', 'styringsrente',\n",
    "       'styringsrente_trend3', 'styringsrente_trend6'\n",
    "        ]]\n",
    "    x_pred=df_pred[[\n",
    "        'Hoyre_var', 'Frp_var', 'SV_var', 'SP_var',\n",
    "       'KrF_var', 'Venstre_var', 'MDG_var', 'Rodt_var', 'Andre_var',\n",
    "       'Ap_skandale', 'Hoyre_skandale', 'Frp_skandale', 'SV_skandale',\n",
    "       'SP_skandale', 'KrF_skandale', 'Venstre_skandale', 'MDG_skandale',\n",
    "       'Rodt_skandale', 'Andre_skandale', 'Ap_skandale_lag3',\n",
    "       'Ap_skandale_lag6', 'Hoyre_skandale_lag3', 'Hoyre_skandale_lag6',\n",
    "       'Frp_skandale_lag3', 'Frp_skandale_lag6', 'SV_skandale_lag3',\n",
    "       'SV_skandale_lag6', 'SP_skandale_lag3', 'SP_skandale_lag6',\n",
    "       'KrF_skandale_lag3', 'KrF_skandale_lag6', 'Venstre_skandale_lag3',\n",
    "       'Venstre_skandale_lag6', 'MDG_skandale_lag3', 'MDG_skandale_lag6',\n",
    "       'Rodt_skandale_lag3', 'Rodt_skandale_lag6', 'Andre_skandale_lag3',\n",
    "       'Andre_skandale_lag6', \n",
    "        'Ap_reg', 'Hoyre_reg', 'Frp_reg', 'SV_reg',\n",
    "       'SP_reg', 'KrF_reg', 'Venstre_reg', 'MDG_reg', 'Rodt_reg', 'Andre_reg',\n",
    "       'Ap_reg_lag3', 'Ap_reg_lag6', 'Hoyre_reg_lag3', 'Hoyre_reg_lag6',\n",
    "       'Frp_reg_lag3', 'Frp_reg_lag6', 'SV_reg_lag3', 'SV_reg_lag6',\n",
    "       'SP_reg_lag3', 'SP_reg_lag6', 'KrF_reg_lag3', 'KrF_reg_lag6',\n",
    "       'Venstre_reg_lag3', 'Venstre_reg_lag6', 'MDG_reg_lag3', 'MDG_reg_lag6',\n",
    "       'Rodt_reg_lag3', 'Rodt_reg_lag6', 'Andre_reg_lag3', 'Andre_reg_lag6',\n",
    "       'ledighet', 'ledig_trend3', 'ledig_trend6', 'styringsrente',\n",
    "        'styringsrente_trend3', 'styringsrente_trend6'\n",
    "        ]]\n",
    "    \n",
    "    x_train, x_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42\n",
    "    )\n",
    "    estimators = [\n",
    "    ('rf', RandomForestRegressor(n_estimators=10000)),\n",
    "    ('xgb', GradientBoostingRegressor(n_estimators=1000)),\n",
    "    ('ridge', RidgeCV())\n",
    "    ]\n",
    "    stacking_model = StackingRegressor(estimators=estimators, final_estimator=RidgeCV())\n",
    "\n",
    "    pipeline = Pipeline([\n",
    "        (\"feature_selection\", SelectFromModel(RandomForestRegressor(n_estimators=1000, random_state=42), threshold=\"median\")),\n",
    "        (\"regressor\", stacking_model)\n",
    "    ])\n",
    "    pipeline.fit(x_train, y_train.values.ravel())\n",
    "    y_pred = pipeline.predict(x_test)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    \n",
    "    p=pipeline.predict(x_pred)\n",
    "    #print(party + \": \" + str(p[0]))\n",
    "    predictions.append({'party': party, 'prediction': p[0], \"r2_score\": r2})\n",
    "\n",
    "     # Get feature selector and selected feature mask\n",
    "    selector = pipeline.named_steps[\"feature_selection\"]\n",
    "    selected_mask = selector.get_support()\n",
    "    selected_features = X.columns[selected_mask]\n",
    "    \n",
    "    # Get feature importances from RandomForest used in feature selection\n",
    "    importances = selector.estimator_.feature_importances_\n",
    "    selected_importances = importances[selected_mask]\n",
    "    \n",
    "    # Combine feature names with importances\n",
    "    feature_importance_dict = dict(zip(selected_features, selected_importances))\n",
    "    \n",
    "    # Sort by importance\n",
    "    top_features = sorted(feature_importance_dict.items(), key=lambda x: x[1], reverse=True)[:3]\n",
    "    \n",
    "    # Format the top 3 for printing\n",
    "    top_features_str = \", \".join([f\"{name} ({importance:.3f})\" for name, importance in top_features])\n",
    "    \n",
    "    # Print prediction, R2, and top features\n",
    "    print(f\"{party}: {p[0]:.3f} (R²: {r2:.2f}) – Top 3 features: {top_features_str}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "2ecb177c-dcac-41c2-94dc-f7273271f322",
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_df = pd.DataFrame(predictions)\n",
    "total = pred_df['prediction'].sum()\n",
    "pred_df['prediction'] = (pred_df['prediction'] / total) * 100\n",
    "pred_df['prediction'] = pred_df['prediction'].round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "39791785-64a5-409f-a808-7fcf71582930",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>party</th>\n",
       "      <th>prediction</th>\n",
       "      <th>r2_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ap</td>\n",
       "      <td>29.45</td>\n",
       "      <td>0.957973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hoyre</td>\n",
       "      <td>17.17</td>\n",
       "      <td>0.930999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Frp</td>\n",
       "      <td>18.24</td>\n",
       "      <td>0.952237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SV</td>\n",
       "      <td>6.62</td>\n",
       "      <td>0.964133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SP</td>\n",
       "      <td>8.15</td>\n",
       "      <td>0.968668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>KrF</td>\n",
       "      <td>3.45</td>\n",
       "      <td>0.866297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Venstre</td>\n",
       "      <td>4.46</td>\n",
       "      <td>0.796109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>MDG</td>\n",
       "      <td>3.36</td>\n",
       "      <td>0.957699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Rodt</td>\n",
       "      <td>4.78</td>\n",
       "      <td>0.974754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Andre</td>\n",
       "      <td>4.34</td>\n",
       "      <td>0.971131</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     party  prediction  r2_score\n",
       "0       Ap       29.45  0.957973\n",
       "1    Hoyre       17.17  0.930999\n",
       "2      Frp       18.24  0.952237\n",
       "3       SV        6.62  0.964133\n",
       "4       SP        8.15  0.968668\n",
       "5      KrF        3.45  0.866297\n",
       "6  Venstre        4.46  0.796109\n",
       "7      MDG        3.36  0.957699\n",
       "8     Rodt        4.78  0.974754\n",
       "9    Andre        4.34  0.971131"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5eceb22-c29b-4fe6-a6f2-11537dc47cd1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
